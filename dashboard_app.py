# -*- coding: utf-8 -*-

# =============================================================================
# –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø (DASHBOARD)
# =============================================================================
#
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Flask, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º.
#
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
# - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
# - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç–º–µ–Ω—è—Ç—å –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
# - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
#
# =============================================================================


# --- –ò–º–ø–æ—Ä—Ç—ã ---
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, request, jsonify, render_template, redirect, url_for, session
from datetime import timedelta
import os
import bcrypt

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.
import config
from bot_logic import (
    calculate_summary_stats,
    execute_order,
    get_positions,
    get_pending_orders,
    close_position,
    close_all_positions,
    cancel_order
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è (Docker –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ).
if os.getenv("DOCKER_ENV"):
    log_directory = "/app/logs"  # –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
else:
    log_directory = "logs"      # –ü—É—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
os.makedirs(log_directory, exist_ok=True) # –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤: –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–æ 2MB, —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ 5 —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π.
log_file_path = os.path.join(log_directory, "dashboard.log")
file_handler = RotatingFileHandler(log_file_path, maxBytes=2_000_000, backupCount=5)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
console_handler = logging.StreamHandler()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
logger = logging.getLogger("dashboard")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s")
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å) –∫ –ª–æ–≥–≥–µ—Ä—É.
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logger.info("üéâ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Flask Secret Key: {config.FLASK_SECRET_KEY[:5]}...") # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
app.secret_key = config.FLASK_SECRET_KEY

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π Flask.
app.config.update(
    PERMANENT_SESSION_LIFETIME=config.SESSION_PERMANENT_LIFETIME, # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    SESSION_COOKIE_SECURE=False,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ True –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ HTTPS.
    SESSION_COOKIE_HTTPONLY=True, # –ó–∞—â–∏—Ç–∞ cookie –æ—Ç –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ JavaScript.
    SESSION_COOKIE_SAMESITE="Strict" # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF-–∞—Ç–∞–∫.
)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º—É, –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.
def login_required(func):
    from functools import wraps
    @wraps(func)
    def wrapper(*args, **kwargs):
        session.permanent = True # –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ.
        if not session.get("logged_in"):
            return redirect(url_for("login")) # –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.
        return func(*args, **kwargs)
    return wrapper

# --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É ---
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        password = request.form.get("password")
        # –ü–∞—Ä–æ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —É–∂–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
        hashed_password = config.DASHBOARD_PASSWORD.encode('utf-8')
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å —Ö—ç—à–µ–º —Å –ø–æ–º–æ—â—å—é bcrypt.
        if bcrypt.checkpw(password.encode('utf-8'), hashed_password):
            session["logged_in"] = True
            session.permanent = True
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")
            return redirect(url_for("index")) # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        else:
            logger.warning("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞.")
            return render_template("login.html", error="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    return render_template("login.html")

# --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã ---
@app.route("/logout")
def logout():
    session.clear() # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏.
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    return redirect(url_for("login"))

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
@app.route("/")
@login_required # –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
def index():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏."""
    try:
        positions = get_positions()
        pending_orders = get_pending_orders()
        return render_template("dashboard.html", positions=positions, pending_orders=pending_orders)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return render_template("dashboard.html", error=str(e))

# --- API: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π ---
@app.route("/positions", methods=["GET"])
@login_required
def positions():
    try:
        positions = get_positions()
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏.")
        return jsonify(positions)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- API: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ---
@app.route("/pending_orders", methods=["GET"])
@login_required
def pending_orders():
    try:
        orders = get_pending_orders()
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞.")
        return jsonify(orders)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@app.route("/summary_stats", methods=["GET"])
@login_required
def summary_stats():
    try:
        stats = calculate_summary_stats() # –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –∏–∑ bot_logic.py
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.")
        return jsonify(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- –î–µ–π—Å—Ç–≤–∏–µ: –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ---
@app.route("/close_position", methods=["POST"])
@login_required
def close_position_route():
    try:
        data = request.form
        exchange_name = data['EXCHANGE']
        symbol = data['SYMBOL']
        result = close_position(exchange_name, symbol)
        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –¥–ª—è {symbol} –Ω–∞ –±–∏—Ä–∂–µ {exchange_name} –∑–∞–∫—Ä—ã—Ç–∞: {result}")
        return redirect(url_for("index"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return redirect(url_for("index"))

# --- –î–µ–π—Å—Ç–≤–∏–µ: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ---
@app.route("/close_all_positions", methods=["POST"])
@login_required
def close_all_positions_route():
    try:
        result = close_all_positions()
        logger.info("–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
        return redirect(url_for("index"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
        return redirect(url_for("index"))

# --- –î–µ–π—Å—Ç–≤–∏–µ: –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ ---
@app.route("/cancel_order", methods=["POST"])
@login_required
def cancel_order_route():
    try:
        data = request.form
        exchange_name = data["EXCHANGE"]
        order_id = data["ORDER_ID"]
        symbol = data["SYMBOL"]
        result = cancel_order(exchange_name, order_id, symbol)
        logger.info(f"–û—Ä–¥–µ—Ä {order_id} –Ω–∞ –±–∏—Ä–∂–µ {exchange_name} –æ—Ç–º–µ–Ω–µ–Ω.")
        return redirect(url_for("index"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {e}")
        return redirect(url_for("index"))

# --- API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ ---
@app.route("/logs", methods=["GET"])
@login_required
def logs():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö .log —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤."""
    try:
        log_files = [f for f in os.listdir(log_directory) if f.endswith(".log")]
        all_logs = {}
        for log_file in log_files:
            log_file_path = os.path.join(log_directory, log_file)
            try:
                with open(log_file_path, "r") as f:
                    all_logs[log_file] = f.readlines()
            except Exception as e:
                all_logs[log_file] = [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}"]
        return jsonify({"status": "success", "logs": all_logs})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, `python dashboard_app.py`).
if __name__ == "__main__":
    app.run(host=config.DASHBOARD_HOST, port=config.DASHBOARD_PORT)
