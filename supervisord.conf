# =============================================================================
# КОНФИГУРАЦИЯ SUPERVISOR
# =============================================================================
#
# Этот файл определяет, как `supervisord` (система управления процессами)
# должен запускать, контролировать и управлять различными компонентами
# приложения TradeX.
#
# Файл разделен на несколько секций:
# - [supervisorctl]: Настройки для клиента управления `supervisorctl`.
# - [supervisord]: Глобальные настройки для самого демона `supervisord`.
# - [program:...] : Описание каждого отдельного процесса (программы),
#   которым должен управлять `supervisord`.
# - [group:...] : Группировка программ для удобного управления ими
#   как единым целым.
#
# =============================================================================

# --- Конфигурация клиента `supervisorctl` ---
[supervisorctl]
# Путь к сокет-файлу для взаимодействия клиента `supervisorctl` с сервером.
serverurl=unix:///var/run/supervisor.sock

# --- Глобальная конфигурация демона `supervisord` ---
[supervisord]
# `nodaemon=true` означает, что supervisord будет работать в основном (foreground) режиме.
# Это стандартная практика для Docker, так как контейнер должен иметь один основной процесс.
nodaemon=true
# Путь к основному лог-файлу самого supervisord.
logfile=/var/log/supervisor/supervisord.log
# Максимальный размер лог-файла перед ротацией.
logfile_maxbytes=5MB
# Количество хранимых архивных копий лог-файла.
logfile_backups=10
# Уровень логирования (debug, info, warn, error, critical).
loglevel=info
# Путь к файлу, в котором хранится PID (идентификатор процесса) supervisord.
pidfile=/var/run/supervisord.pid

# =============================================================================
# ОПИСАНИЕ ПРОГРАММ (ПРОЦЕССОВ)
# =============================================================================

# --- Программа №1: Панель управления (Dashboard) ---
[program:dashboard_app]
# Команда для запуска. Запускает Gunicorn с 2 воркерами, слушает порт 5000.
command=gunicorn -w 2 -b 0.0.0.0:5000 dashboard_app:app
# Рабочая директория, из которой будет выполняться команда.
directory=/app
# `autostart=true`: Запускать эту программу автоматически при старте supervisord.
autostart=true
# `autorestart=true`: Автоматически перезапускать программу, если она завершилась с ошибкой.
autorestart=true
# Путь к лог-файлу для стандартного потока ошибок (stderr).
stderr_logfile=/var/log/supervisor/dashboard_app.err.log
# Путь к лог-файлу для стандартного потока вывода (stdout).
stdout_logfile=/var/log/supervisor/dashboard_app.out.log
# Время в секундах, которое программа должна проработать, чтобы считаться успешно запущенной.
startsecs=5
# Время в секундах, которое supervisord будет ждать перед принудительным завершением (SIGKILL) при остановке.
stopwaitsecs=10
# Приоритет запуска. Программы с меньшим значением запускаются раньше.
priority=10

# --- Программа №2: Приемник веб-хуков (Webhook) ---
[program:webhook_app]
# Команда для запуска. Запускает Gunicorn с 2 воркерами, слушает порт 5005.
command=gunicorn -w 2 -b 0.0.0.0:5005 webhook_receiver:app
directory=/app
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/webhook_app.err.log
stdout_logfile=/var/log/supervisor/webhook_app.out.log
startsecs=5
stopwaitsecs=10
# Приоритет выше, чем у dashboard, значит, запустится позже.
priority=20

# --- Программа №3: Модуль чтения почты ---
[program:email_reader]
# Команда для запуска. Просто выполняет Python-скрипт.
command=python email_reader.py
directory=/app
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/email_reader.err.log
stdout_logfile=/var/log/supervisor/email_reader.out.log
# Даем больше времени на запуск, так как может быть задержка при первом подключении к почте.
startsecs=10
stopwaitsecs=15
# Коды выхода, которые supervisord будет считать "успешными" и не требующими перезапуска.
exitcodes=0,2
priority=30

# =============================================================================
# ГРУППИРОВКА ПРОГРАММ
# =============================================================================
[group:tradex]
# Объединяет все три программы в одну группу с именем `tradex`.
# Это позволяет управлять ими всеми одновременно с помощью команд типа:
# `supervisorctl start tradex:*`
# `supervisorctl stop tradex:*`
programs=dashboard_app,webhook_app,email_reader
# Приоритет группы.
priority=999
