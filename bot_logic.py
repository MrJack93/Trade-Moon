import ccxt
import logging
import config
import os
from logging.handlers import RotatingFileHandler

# ==============================
# üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è (Docker –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
if os.getenv("DOCKER_ENV"):
    log_directory = "/app/logs"  # –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
else:
    log_directory = "logs"  # –ü—É—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(log_directory, exist_ok=True)
log_file_path = os.path.join(log_directory, "trading.log")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥-—Ñ–∞–π–ª–æ–≤: 5 —Ñ–∞–π–ª–æ–≤ –ø–æ 2 –ú–ë –∫–∞–∂–¥—ã–π
file_handler = RotatingFileHandler(log_file_path, maxBytes=2_000_000, backupCount=5)
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("trading")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s")
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ª–æ–≥–≥–µ—Ä
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂...")

# ==============================
# üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
# ==============================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–∏—Ä–∂
exchanges = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã API-–∫–ª—é—á–∏
if config.BYBIT_API_KEY and config.BYBIT_API_SECRET:
    logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bybit API...")
    try:
        exchanges['bybit'] = ccxt.bybit({
            'apiKey': config.BYBIT_API_KEY,
            'secret': config.BYBIT_API_SECRET
        })
        logger.info("‚úÖ Bybit —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã API-–∫–ª—é—á–∏
if config.BINANCE_API_KEY and config.BINANCE_API_SECRET:
    logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Binance API...")
    try:
        exchange = ccxt.binance({
            'apiKey': config.BINANCE_API_KEY,
            'secret': config.BINANCE_API_SECRET,
            'options': {
                'defaultType': 'future',  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—å—é—á–µ—Ä—Å—ã –∫–∞–∫ —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            },
            'enableRateLimit': True,  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è Binance
        if os.getenv('USE_DEMO_TRADING', 'false').lower() == 'true':
            logger.info("üéõÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –î–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è Binance...")
            exchange.enable_demo_trading(True)
        
        exchanges['binance'] = exchange
        logger.info("‚úÖ Binance Futures —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance Futures: {e}")

# –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂
if exchanges:
    logger.info(f"üéâ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {list(exchanges.keys())}")
else:
    logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

# ==============================
# üöÄ –§—É–Ω–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
# ==============================

def get_positions():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏.

    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º (–≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω—É–ª—è)
    –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏—Ä–∂, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π,
              –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é.
              –ü—Ä–∏–º–µ—Ä: {'binance': [{'symbol': 'BTC/USDT', 'side': 'long', ...}]}
              –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –±–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.
    
    Raises:
        ccxt.base.errors.RequestTimeout: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–∞–π–º-–∞—É—Ç.
        ccxt.base.errors.AuthenticationError: –ï—Å–ª–∏ API-–∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.
        ccxt.base.errors.NetworkError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.
    """
    logger.info("üìä –ó–∞–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
    positions_data = {}

    if not exchanges:
        logger.error("‚ùå –ë–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return positions_data

    for exchange_name, exchange in exchanges.items():
        positions_data[exchange_name] = []
        try:
            all_positions = exchange.fetch_positions()
            for pos in all_positions:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if pos.get('contracts', 0) > 0:
                    positions_data[exchange_name].append({
                        "symbol": pos.get('symbol', 'N/A'),
                        "side": pos.get('side', 'N/A'),
                        "contracts": pos.get('contracts', 0),
                        "notional": pos.get('notional', 0.0),
                        "entry_price": pos.get('entryPrice', 0.0),
                        "liquidation_price": pos.get('liquidationPrice', None),
                        "margin_ratio": pos.get('marginRatio', None),
                        "leverage": pos.get('leverage', None),
                        "unrealized_pnl": pos.get('unrealizedPnl', 0.0),
                        "exchange": exchange_name
                    })
        except Exception as e:
            logger.error(f"‚ùå [get_positions] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {exchange_name}: {e}")

    logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {positions_data}")
    return positions_data


def get_pending_orders():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö (–æ—Ç–∫—Ä—ã—Ç—ã—Ö) –æ—Ä–¥–µ—Ä–æ–≤ —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏—Ä–∂, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å–ø–∏—Å–∫–∏
              –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç ccxt.
              –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –±–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

    Raises:
        ccxt.base.errors.RequestTimeout: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–∞–π–º-–∞—É—Ç.
        ccxt.base.errors.AuthenticationError: –ï—Å–ª–∏ API-–∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.
        ccxt.base.errors.NetworkError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.
    """
    logger.info("üìã –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
    pending_orders = {}

    if not exchanges:
        logger.error("‚ùå –ë–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return pending_orders

    for exchange_name, exchange in exchanges.items():
        try:
            # fetch_open_orders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ccxt
            orders = exchange.fetch_open_orders()
            pending_orders[exchange_name] = orders
        except Exception as e:
            logger.error(f"‚ùå [get_pending_orders] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {exchange_name}: {e}")

    return pending_orders


def execute_order(exchange_name, symbol, side, order_type, quantity, price=None):
    """
    –†–∞–∑–º–µ—â–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ (market) –∏ –ª–∏–º–∏—Ç–Ω—ã–µ (limit) –æ—Ä–¥–µ—Ä–∞.

    Args:
        exchange_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'binance').
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT').
        side (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ('buy' –∏–ª–∏ 'sell').
        order_type (str): –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ('market' –∏–ª–∏ 'limit').
        quantity (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏.
        price (float, optional): –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞. Defaults to None.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
              –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞: {'status': 'success', 'order': {...}}.
              –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏: {'status': 'error', 'message': '...'}.
    
    Raises:
        ccxt.base.errors.InvalidOrder: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        ccxt.base.errors.InsufficientFunds: –ï—Å–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.
        Exception: –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å API.
    """
    logger.info(f"üìå –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {exchange_name}: {side} {quantity} {symbol} ({order_type}) –ø–æ —Ü–µ–Ω–µ {price if price else '—Ä—ã–Ω–æ—á–Ω–æ–π'}")

    if exchange_name not in exchanges:
        logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return {"status": "error", "message": f"–ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    exchange = exchanges[exchange_name]

    try:
        if order_type == "market":
            order = exchange.create_market_order(symbol, side, quantity)
        elif order_type == "limit" and price:
            order = exchange.create_limit_order(symbol, side, quantity, price)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type} –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞.")
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"}

        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
        return {"status": "success", "order": order}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {exchange_name}: {e}")
        return {"status": "error", "message": str(e)}


def close_position(exchange_name, symbol):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∏—Ä–∂–µ.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ (long/short) –∏ —Å–æ–∑–¥–∞–µ—Ç
    –≤—Å—Ç—Ä–µ—á–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –µ–µ –∑–∞–∫—Ä—ã—Ç–∏—è.

    Args:
        exchange_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏.
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
              –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞: {'status': 'success', 'order': {...}}.
              –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏: {'status': 'error', 'message': '...'}.
    
    Raises:
        ccxt.base.errors.InvalidOrder: –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
        ccxt.base.errors.InsufficientFunds: –ï—Å–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.
    """
    logger.info(f"‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {symbol} –Ω–∞ {exchange_name}...")

    if exchange_name not in exchanges:
        logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return {"status": "error", "message": f"–ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    exchange = exchanges[exchange_name]

    try:
        positions = get_positions().get(exchange_name, [])
        for pos in positions:
            if pos["symbol"] == symbol:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: 'sell' –¥–ª—è long, 'buy' –¥–ª—è short
                side = "sell" if (pos["side"] == "buy" or pos["side"] == "long") else "buy"
                order = exchange.create_market_order(symbol, side, pos["contracts"])
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {order}")
                return {"status": "success", "order": order}

        logger.warning(f"‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}.")
        return {"status": "error", "message": "–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}


def close_all_positions():
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.

    –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º, –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∏–∑ –Ω–∏—Ö.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏.
              –ö–ª—é—á - —Å–∏–º–≤–æ–ª, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç `close_position`.
    """
    logger.info("‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")

    results = {}
    all_positions = get_positions()
    for exchange_name, positions in all_positions.items():
        for pos in positions:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            result = close_position(exchange_name, pos["symbol"])
            results[f"{exchange_name}_{pos['symbol']}"] = result

    logger.info(f"‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã: {results}")
    return results


def cancel_order(exchange_name, order_id, symbol):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ –µ–≥–æ ID –∏ —Å–∏–º–≤–æ–ª—É.

    Args:
        exchange_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏.
        order_id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–¥–µ—Ä–∞.
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª –æ—Ä–¥–µ—Ä–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏—Ä–∂–∏ —Ç—Ä–µ–±—É—é—Ç –µ–≥–æ).

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
              –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞: {'status': 'success', 'order': {...}}.
              –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏: {'status': 'error', 'message': '...'}.
    
    Raises:
        ccxt.base.errors.OrderNotFound: –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.
        ccxt.base.errors.InvalidOrder: –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.
    """
    logger.info(f"üö´ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} –Ω–∞ {exchange_name}...")

    if exchange_name not in exchanges:
        logger.error(f"‚ùå –ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return {"status": "error", "message": f"–ë–∏—Ä–∂–∞ {exchange_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

    exchange = exchanges[exchange_name]

    try:
        result = exchange.cancel_order(order_id, symbol)
        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.")
        return {"status": "success", "order": result}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        return {"status": "error", "message": str(e)}


def calculate_summary_stats():
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é.

    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ, PnL –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–µ —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è USDT.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –≤–∫–ª—é—á–∞—é—â–∏–π:
              - 'portfolio_value' (float): –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USDT.
              - 'total_pnl' (float): –°—É–º–º–∞—Ä–Ω—ã–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL.
              - 'margin_used' (float): –°—É–º–º–∞—Ä–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞.
              –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –±–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.
              
    Raises:
        ccxt.base.errors.RequestTimeout: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–∞–π–º-–∞—É—Ç.
        ccxt.base.errors.AuthenticationError: –ï—Å–ª–∏ API-–∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.
    """
    logger.info("üìä –†–∞—Å—á–µ—Ç —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    summary_stats = {
        "portfolio_value": 0.0,
        "total_pnl": 0.0,
        "margin_used": 0.0,
    }

    if not exchanges:
        logger.error("‚ùå –ë–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return summary_stats

    all_positions = get_positions()

    for exchange_name, exchange in exchanges.items():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_balance = exchange.fetch_balance()
            positions = all_positions.get(exchange_name, [])

            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è USDT)
            summary_stats["portfolio_value"] += account_balance.get('USDT', {}).get('total', 0.0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –º–∞—Ä–∂—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
            for pos in positions:
                summary_stats["total_pnl"] += pos.get('unrealized_pnl', 0.0)
                # –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ = —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ * –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                margin_ratio = pos.get('marginRatio')
                if margin_ratio is not None:
                     summary_stats["margin_used"] += pos.get('notional', 0.0) * margin_ratio

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {exchange_name}: {e}")

    logger.info(f"üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {summary_stats}")
    return summary_stats
