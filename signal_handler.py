# -*- coding: utf-8 -*-

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í (SIGNAL HANDLER)
# =============================================================================
#
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —è–¥—Ä–æ–º —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏. –û–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º (Bybit, Binance) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
#    API-–∫–ª—é—á–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
# 2. –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ webhook_receiver
#    –∏–ª–∏ email_reader.
# 3. –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ (–ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π).
# 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –±–∏—Ä–∂—É.
#
# =============================================================================

import os
import logging
from logging.handlers import RotatingFileHandler
import config
import ccxt


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å)
if os.getenv("DOCKER_ENV"):
    log_directory = "/app/logs"
else:
    log_directory = "logs"
os.makedirs(log_directory, exist_ok=True)
log_file_path = os.path.join(log_directory, "trading.log")
file_handler = RotatingFileHandler(log_file_path, maxBytes=2_000_000, backupCount=5)
console_handler = logging.StreamHandler()

logger = logging.getLogger("trading")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s")
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logger.info("üéâ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ ---
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–∏—Ä–∂.
exchanges = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit, –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –µ—Å—Ç—å API-–∫–ª—é—á–∏.
if config.BYBIT_API_KEY and config.BYBIT_API_SECRET:
    exchanges['bybit'] = ccxt.bybit({
        'apiKey': config.BYBIT_API_KEY,
        'secret': config.BYBIT_API_SECRET,
        'enableRateLimit': True, # –í–∫–ª—é—á–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤.
    })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Futures, –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –µ—Å—Ç—å API-–∫–ª—é—á–∏.
if config.BINANCE_API_KEY and config.BINANCE_API_SECRET:
    exchange = ccxt.binance({
        'apiKey': config.BINANCE_API_KEY,
        'secret': config.BINANCE_API_SECRET,
        'options': {
            'defaultType': 'future', # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏.
        },
        'enableRateLimit': True,
    })
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è Binance.
    if os.getenv('USE_DEMO_TRADING', 'false').lower() == 'true':
        exchange.enable_demo_trading(True)
    exchanges['binance'] = exchange

def process_signal(data):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
    """
    try:
        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ ---
        required_fields = ["EXCHANGE", "SYMBOL", "SIDE", "ORDER_TYPE", "QUANTITY"]
        for field in required_fields:
            if field not in data:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return

        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä).
        exchange_name = data["EXCHANGE"].lower()
        symbol = data["SYMBOL"]
        side = data["SIDE"].lower()
        order_type = data["ORDER_TYPE"].lower()
        
        try:
            quantity = float(data["QUANTITY"])
        except ValueError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ QUANTITY: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ä–¥–µ—Ä–∞.
        if side not in ["buy", "sell"]:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SIDE: {side}. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'.")
            return

        # –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã.
        if order_type == "limit":
            if "PRICE" not in data:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'PRICE' –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.")
                return
            try:
                price = float(data["PRICE"])
            except ValueError:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PRICE: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

        # --- –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ---
        exchange = exchanges.get(exchange_name)
        if not exchange:
            logger.error(f"–ë–∏—Ä–∂–∞ '{exchange_name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {exchange_name}: {data}")
        if order_type == "limit":
            order = exchange.create_order(symbol, order_type, side, quantity, price)
        elif order_type == "market":
            order = exchange.create_order(symbol, order_type, side, quantity)
        else:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}")
            return

        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
