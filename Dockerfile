# =============================================================================
# DOCKERFILE - ИНСТРУКЦИЯ ПО СБОРКЕ ОБРАЗА
# =============================================================================
#
# Этот файл содержит пошаговые инструкции для Docker по созданию образа
# приложения. Образ — это легковесный, автономный, исполняемый пакет,
# который включает в себя всё необходимое для запуска приложения: код,
# среду выполнения, системные инструменты, библиотеки и настройки.
#
# =============================================================================


# --- Шаг 1: Базовый образ ---
# В качестве основы используется официальный образ Python версии 3.10.
# Это гарантирует предсказуемую среду выполнения.
FROM python:3.10

# --- Шаг 2: Установка рабочей директории ---
# Задает рабочую директорию внутри контейнера. Все последующие команды
# (COPY, RUN, CMD) будут выполняться относительно этого пути.
WORKDIR /app

# --- Шаг 3: Копирование файлов приложения ---
# Копирует все файлы из текущей директории (где находится Dockerfile)
# в рабочую директорию `/app` внутри контейнера.
COPY . /app
# Отдельно копирует файл .env, чтобы он был доступен приложению.
COPY .env /app/.env

# --- Шаг 4: Установка системных зависимостей ---
# Обновляет список пакетов и устанавливает `supervisor`.
# `supervisor` — это система управления процессами, которая будет
# запускать и контролировать несколько сервисов (веб-сервер, воркеры)
# внутри одного контейнера.
# `&& rm -rf /var/lib/apt/lists/*` — очищает кэш apt для уменьшения размера образа.
RUN apt-get update && apt-get install -y \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# --- Шаги создания директорий и установки прав (закомментировано) ---
# Эти команды могут быть полезны, но в текущей конфигурации не обязательны.
#RUN mkdir -p /var/log/supervisor /app/logs
#RUN chmod -R 777 /var/log/supervisor /app/logs

# --- Шаг 5: Установка зависимостей Python ---
# Устанавливает все Python-библиотеки, перечисленные в файле `requirements.txt`.
# `--no-cache-dir` отключает кэширование pip, что также помогает уменьшить размер итогового образа.
RUN pip install --no-cache-dir -r requirements.txt

# --- Шаг 6: Копирование конфигурации Supervisor ---
# Копирует локальный файл конфигурации `supervisord.conf` в системную
# директорию `supervisor` внутри контейнера.
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# --- Шаг 7: Открытие портов ---
# Информирует Docker о том, что контейнер будет прослушивать указанные
# сетевые порты во время выполнения. Это не публикует порты, а служит
# документацией для пользователя и для связи между контейнерами.
# Публикация портов происходит в `docker-compose.yml`.
EXPOSE 5000 5005

# --- Шаг 8: Проверка состояния (Health Check) ---
# Определяет команду для проверки работоспособности приложения.
# Docker будет периодически выполнять эту команду.
# --interval=30s: выполнять проверку каждые 30 секунд.
# --timeout=10s: считать проверку неудачной, если она длится дольше 10 секунд.
# --retries=3: считать контейнер неработоспособным после 3 неудачных попыток подряд.
# CMD: Проверяет, что страница логина (порт 5000) отвечает, и что
# эндпоинт веб-хука (порт 5005) возвращает код ответа в диапазоне 2xx-4xx.
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD curl -sf http://localhost:5000/login >/dev/null && \
      curl -s -o /dev/null -w "%{http_code}" http://localhost:5005/webhook | grep -qE '[2-4][0-9][0-9]' || exit 1

# --- Шаг 9: Команда запуска контейнера ---
# Основная команда, которая выполняется при запуске контейнера.
# Запускает `supervisord` в основном (не фоновом) режиме, который, в свою очередь,
# запускает все процессы, описанные в его конфигурационном файле.
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
