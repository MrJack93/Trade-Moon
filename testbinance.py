import ccxt

def connect_and_check_balance():
    # –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–∫–ª—é—á–∏
    api_key = 'WwpXxSMYNUmsO0KKf0BwW7LTjFWqcDEmlPVlyVwUYK3Q9MkRWXiaX11qUfBIkbvc'
    secret_key = 'el5AQrUqJKuW96cqb5Ht9pNOtzU1u9RBIYVcyNjYeZGLkNjmVC8vKAiWTquWhufO'
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        exchange = ccxt.binance({
            'apiKey': api_key,
            'secret': secret_key,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            },
            'enableRateLimit': True,
        })
        
        # –í–∫–ª—é—á–∞–µ–º –¥–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª—é (–í–ê–ñ–ù–û!)
        exchange.enable_demo_trading(True)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –¥–µ–º–æ-—Å—Ä–µ–¥–µ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = exchange.fetch_balance()
        
        print("\nüí∞ –ë–ê–õ–ê–ù–° –î–ï–ú–û-–°–ß–ï–¢–ê:")
        print("=" * 50)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        currencies = ['USDT', 'BTC', 'ETH', 'BNB', 'BUSD']
        
        for currency in currencies:
            if currency in balance:
                print(f"{currency}:")
                print(f"  –°–≤–æ–±–æ–¥–Ω–æ: {balance[currency]['free']}")
                print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {balance[currency]['used']}")
                print(f"  –í—Å–µ–≥–æ: {balance[currency]['total']}")
                print("-" * 30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        total_balance = balance['total']
        print(f"\nüìä –û–ë–©–ò–ô –ë–ê–õ–ê–ù–°:")
        for asset, amount in total_balance.items():
            if amount > 0:
                print(f"  {asset}: {amount}")
        
        return exchange
        
    except ccxt.AuthenticationError:
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏!")
    except ccxt.NetworkError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_demo_trading(exchange):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
        symbol = 'BTC/USDT'
        ticker = exchange.fetch_ticker(symbol)
        print(f"\nüéØ –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê {symbol}: {ticker['last']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        open_orders = exchange.fetch_open_orders(symbol)
        print(f"üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(open_orders)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = exchange.fetch_positions([symbol])
        open_positions = [p for p in positions if p['contracts'] > 0]
        print(f"üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(open_positions)}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if __name__ == "__main__":
    exchange = connect_and_check_balance()
    
    if exchange:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_demo_trading(exchange)
        
        print("\nüéâ –î–µ–º–æ-—Å—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")